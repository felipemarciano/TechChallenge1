@page "/login"
@inject AuthenticationService AuthenticationService
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Login</h3>

<div>
    <label for="username">Usuário:</label>
    <input id="username" @bind="username" />
</div>

<div>
    <label for="password">Senha:</label>
    <input id="password" @bind="password" type="password" />
</div>

<button @onclick="LoginAsync">Entrar</button>

@code {
    private string username = "";
    private string password = "";

    private async Task LoginAsync()
    {
        try
        {
            var jwtToken = await AuthenticationService.AuthenticateAsync(username, password);

            if (!string.IsNullOrEmpty(jwtToken))
            {
                CustomAuthenticationStateProvider.SetToken(jwtToken);

                // Armazene o token JWT em um cookie seguro usando IJSRuntime
                await JSRuntime.InvokeVoidAsync("cookieHelper.setCookie", "authToken", jwtToken, 1);

                // Redirecionar para a página inicial após o login bem-sucedido
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                // Mostrar mensagem de erro
                Console.WriteLine("Falha no login. Usuário ou senha inválidos.");
            }
        }
        catch (Exception ex)
        {
            // Mostrar mensagem de erro
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
}

